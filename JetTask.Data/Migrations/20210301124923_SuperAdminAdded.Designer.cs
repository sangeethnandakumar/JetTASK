// <auto-generated />
using System;
using JetTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JetTask.Data.Migrations
{
    [DbContext(typeof(JetTaskContext))]
    [Migration("20210301124923_SuperAdminAdded")]
    partial class SuperAdminAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("JetTask.Entities.AdditionalCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CostCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CostUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CostCreatedBy");

                    b.HasIndex("CostUpdatedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("AdditionalCosts");
                });

            modelBuilder.Entity("JetTask.Entities.AppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Build")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UserCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VersionCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("VersionUpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VersionCreatedBy");

                    b.HasIndex("VersionUpdatedBy");

                    b.ToTable("AppVersions");
                });

            modelBuilder.Entity("JetTask.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("JetTask.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Executive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("JetTask.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CommentCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("CommentUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentCreatedBy");

                    b.HasIndex("CommentUpdatedBy");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("TicketId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("JetTask.Entities.HourleyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RateCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RateUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RateCreatedBy");

                    b.HasIndex("RateUpdatedBy");

                    b.ToTable("HourleyRates");
                });

            modelBuilder.Entity("JetTask.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("JetTask.Entities.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("LabelCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("LabelUpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LabelCreatedBy");

                    b.HasIndex("LabelUpdatedBy");

                    b.HasIndex("TicketId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("JetTask.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectPrimaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectSecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTertiaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("JetTask.Entities.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHubLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReleaseNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Releases");
                });

            modelBuilder.Entity("JetTask.Entities.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseId")
                        .HasColumnType("int");

                    b.Property<int?>("SprintCreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("SprintEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SprintStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("SprintStatus")
                        .HasColumnType("int");

                    b.Property<int?>("SprintUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReleaseId")
                        .IsUnique()
                        .HasFilter("[ReleaseId] IS NOT NULL");

                    b.HasIndex("SprintCreatedBy");

                    b.HasIndex("SprintUpdatedBy");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("JetTask.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Assignee")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Estimate")
                        .HasColumnType("time");

                    b.Property<int?>("FixVersionId")
                        .HasColumnType("int");

                    b.Property<int?>("HourleyRateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("Reporter")
                        .HasColumnType("int");

                    b.Property<int?>("SprintId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketCreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketUpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UserCreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UserUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FixVersionId");

                    b.HasIndex("HourleyRateId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SprintId");

                    b.HasIndex("TicketCreatedBy");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketStatusId");

                    b.HasIndex("TicketUpdatedBy");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("JetTask.Entities.TicketStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Resolution")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TicketStatuses");
                });

            modelBuilder.Entity("JetTask.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TimezoneId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TicketId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JetTask.Entities.AdditionalCost", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CostCreatedBy");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("CostUpdatedBy");

                    b.HasOne("JetTask.Entities.Project", null)
                        .WithMany("AdditionalCosts")
                        .HasForeignKey("ProjectId");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.AppVersion", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("VersionCreatedBy");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("VersionUpdatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Attachment", b =>
                {
                    b.HasOne("JetTask.Entities.Ticket", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("JetTask.Entities.Client", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JetTask.Entities.User", null)
                        .WithMany("Clients")
                        .HasForeignKey("UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Comment", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CommentCreatedBy");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("CommentUpdatedBy");

                    b.HasOne("JetTask.Entities.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("JetTask.Entities.Ticket", null)
                        .WithMany("Comments")
                        .HasForeignKey("TicketId");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentComment");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.HourleyRate", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("RateCreatedBy");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("RateUpdatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Label", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("LabelCreatedBy");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("LabelUpdatedBy");

                    b.HasOne("JetTask.Entities.Ticket", null)
                        .WithMany("Labels")
                        .HasForeignKey("TicketId");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Project", b =>
                {
                    b.HasOne("JetTask.Entities.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId");

                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JetTask.Entities.User", null)
                        .WithMany("Projects")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Release", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Sprint", b =>
                {
                    b.HasOne("JetTask.Entities.Project", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectId");

                    b.HasOne("JetTask.Entities.Release", "Release")
                        .WithOne("Sprint")
                        .HasForeignKey("JetTask.Entities.Sprint", "ReleaseId");

                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("SprintCreatedBy");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("SprintUpdatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Project");

                    b.Navigation("Release");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Ticket", b =>
                {
                    b.HasOne("JetTask.Entities.AppVersion", "FixVersion")
                        .WithMany()
                        .HasForeignKey("FixVersionId");

                    b.HasOne("JetTask.Entities.HourleyRate", "HourleyRate")
                        .WithMany()
                        .HasForeignKey("HourleyRateId");

                    b.HasOne("JetTask.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("JetTask.Entities.Sprint", "Sprint")
                        .WithMany("Tickets")
                        .HasForeignKey("SprintId");

                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("TicketCreatedBy");

                    b.HasOne("JetTask.Entities.Ticket", null)
                        .WithMany("AttachedTickets")
                        .HasForeignKey("TicketId");

                    b.HasOne("JetTask.Entities.TicketStatus", "TicketStatus")
                        .WithMany()
                        .HasForeignKey("TicketStatusId");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("TicketUpdatedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("FixVersion");

                    b.Navigation("HourleyRate");

                    b.Navigation("Project");

                    b.Navigation("Sprint");

                    b.Navigation("TicketStatus");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.User", b =>
                {
                    b.HasOne("JetTask.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("JetTask.Entities.Ticket", null)
                        .WithMany("Watchers")
                        .HasForeignKey("TicketId");

                    b.HasOne("JetTask.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("JetTask.Entities.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("JetTask.Entities.Project", b =>
                {
                    b.Navigation("AdditionalCosts");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("JetTask.Entities.Release", b =>
                {
                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("JetTask.Entities.Sprint", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("JetTask.Entities.Ticket", b =>
                {
                    b.Navigation("AttachedTickets");

                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("Labels");

                    b.Navigation("Watchers");
                });

            modelBuilder.Entity("JetTask.Entities.User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
